buildscript {
    repositories {
        maven { url 'http://download.crashlytics.com/maven' }
    }
    dependencies {
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'crashlytics'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://download.crashlytics.com/maven' }
    flatDir {
        dirs 'libs'
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 100
        versionName "1.0.1 - "+getDate()+" - Build " + System.getenv("BUILD_NUMBER")
        testApplicationId "com.mozu.mozuandroidinstoreassistant.app.test"
        testInstrumentationRunner 'com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner'
        testHandleProfiling true
        testFunctionalTest true
        testApplicationId 'com.mozu.mozuandroidinstoreassistant.app.test'
    }
    signingConfigs {
        release {
            //These are fetched from $GRADLE_HOME/.gradle/gradle.properties
            storeFile file(releaseStoreLocation)
            storePassword releaseStorePassword
            keyAlias releaseKeyAlias
            keyPassword releaseKeyPassword
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            ext.betaDistributionEmails="shadaab_kazi@volusion.com, adam_dutton@volusion.com, santhosh_mankala@volusion.com, chris_pound@volusion.com, rabin_joshi@volusion.com, volusionmozu@gmail.com"
            ext.betaDistributionReleaseNotesFilePath=file('releasenotes.txt')
            ext.enableCrashlytics = enableCrashlytics.toBoolean()
            buildConfigField "String", "APP_AUTH_APPID","\""+mozuAuthAppId+"\""
            buildConfigField "String", "APP_AUTH_SHARED_SECRET","\""+mozuAuthSharedSecret+"\""
            buildConfigField "String", "SERVICE_URL","\""+mozuServiceURL+"\""
            if(enableCrashlytics.toBoolean()) {
                buildConfigField "boolean", "ENABLE_CRASHLYTICS", "true"
            }else{
                buildConfigField "boolean", "ENABLE_CRASHLYTICS", "false"
            }
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            ext.betaDistributionEmails="shadaab_kazi@volusion.com, adam_dutton@volusion.com, santhosh_mankala@volusion.com, chris_pound@volusion.com, rabin_joshi@volusion.com, volusionmozu@gmail.com"
            ext.betaDistributionReleaseNotesFilePath=file('releasenotes.txt')
            ext.enableCrashlytics = enableCrashlytics.toBoolean()
            buildConfigField "String", "APP_AUTH_APPID","\""+mozuAuthAppId+"\""
            buildConfigField "String", "APP_AUTH_SHARED_SECRET","\""+mozuAuthSharedSecret+"\""
            buildConfigField "String", "SERVICE_URL","\""+mozuServiceURL+"\""
            if(enableCrashlytics.toBoolean()) {
                buildConfigField "boolean", "ENABLE_CRASHLYTICS", "true"
            }else{
                buildConfigField "boolean", "ENABLE_CRASHLYTICS", "false"
            }
        }

        applicationVariants.all { variant ->
            if (variant.name == "debug"  && enableCrashlytics.toBoolean()) {
                File crashlyticsProperties = new File("${project.projectDir.absolutePath}/crashlytics.properties")
                Properties properties = new Properties()
                properties.put("apiSecret",crashlyticsApiSecret)
                properties.put("apiKey", crashlyticsApiKey)
                properties.store(new FileWriter(crashlyticsProperties), "")
            }
        }
    }



    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    sourceSets {
        androidTest {
            java.srcDirs = ['src/test/java']
        }
    }
    testOptions {
        reportDir = "$project.buildDir/mozu/tests/report"
    }

}

dependencies {
    compile(name:'viewpager', ext:'aar')
    compile 'com.mozu:mozu-api-android:1.13.0'
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.squareup.picasso:picasso:2.3.4'
    compile 'com.android.support:support-v13:19.+'

    compile 'org.joda:joda-convert:1.6'
    compile 'com.jakewharton:butterknife:5.1.2'
    compile 'com.netflix.rxjava:rxjava-android:0.17.5'

    androidTestCompile files('libs/espresso-1.1-bundled.jar')
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}
