buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.fabric.io/public' }
    flatDir {
        dirs 'libs'
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 110
        versionName "1.1.0 - " + getDate() + " - Build " + System.getenv("BUILD_NUMBER")
    }
    signingConfigs {
        release {
            //These are fetched from $GRADLE_HOME/.gradle/gradle.properties
            storeFile file(releaseStoreLocation)
            storePassword releaseStorePassword
            keyAlias releaseKeyAlias
            keyPassword releaseKeyPassword
        }
    }
    productFlavors {
        dev {
            applicationId "com.mozu.mozuandroidinstoreassistant.dev"
            resValue "string", "app_name", "Mozu-DEV"
        }

        app {
            applicationId "com.mozu.mozuandroidinstoreassistant.app"
            resValue "string", "app_name", "Mozu"
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (enableCrashlytics.toBoolean()) {
                File crashlyticsProperties = new File("${project.projectDir.absolutePath}/crashlytics.properties")
                Properties properties = new Properties()
                properties.put("apiSecret", crashlyticsApiSecret)
                properties.put("apiKey", crashlyticsApiKey)
                properties.store(new FileWriter(crashlyticsProperties), "")
            }
            ext.betaDistributionEmails = "shadaab_kazi@volusion.com, adam_dutton@volusion.com, santhosh_mankala@volusion.com, chris_pound@volusion.com, rabin_joshi@volusion.com, james_buckley@volusion.com, android.volusion@gmail.com"
            ext.betaDistributionReleaseNotesFilePath = file('releasenotes.txt')
            ext.enableCrashlytics = enableCrashlytics.toBoolean()
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (enableCrashlytics.toBoolean()) {
                File crashlyticsProperties = new File("${project.projectDir.absolutePath}/crashlytics.properties")
                Properties properties = new Properties()
                properties.put("apiSecret", crashlyticsApiSecret)
                properties.put("apiKey", crashlyticsApiKey)
                properties.store(new FileWriter(crashlyticsProperties), "")
            }
            ext.betaDistributionEmails = "shadaab_kazi@volusion.com, adam_dutton@volusion.com, santhosh_mankala@volusion.com, chris_pound@volusion.com, rabin_joshi@volusion.com, james_buckley@volusion.com, android.volusion@gmail.com"
            ext.betaDistributionReleaseNotesFilePath = file('releasenotes.txt')
            ext.enableCrashlytics = enableCrashlytics.toBoolean()

        }

        applicationVariants.all { variant ->
            buildConfigField "String", "APP_AUTH_APPID", "\"" + mozuAuthAppId + "\""
            buildConfigField "String", "APP_AUTH_SHARED_SECRET", "\"" + mozuAuthSharedSecret + "\""
            buildConfigField "String", "SERVICE_URL", "\"" + mozuServiceURL + "\""
            if (enableCrashlytics.toBoolean()) {
                buildConfigField "boolean", "ENABLE_CRASHLYTICS", "true"
            } else {
                buildConfigField "boolean", "ENABLE_CRASHLYTICS", "false"
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile(name: 'viewpager', ext: 'aar')
    compile 'com.mozu:mozu-api-android:1.17.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true;
    }
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.android.support:support-v13:22.2.1'

    compile 'org.joda:joda-convert:1.6'
    compile 'com.jakewharton:butterknife:5.1.2'
    compile 'com.netflix.rxjava:rxjava-android:0.17.5'
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}
